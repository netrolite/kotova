generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "cockroachdb"
  url       = env("DB_URL")
  directUrl = env("DIRECT_DB_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  phone         String?      @unique
  image         String?
  accounts      Account[]
  role          Int
  sessions      Session[]
  createdTests  Test[]
  testResults   TestResult[]
  createdAt     DateTime     @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id              String         @id @default(cuid())
  title           String
  questions       TestQuestion[]
  testResults     TestResult[]
  maxScore        Int
  avgScore        Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       User           @relation(fields: [createdByUserId], references: [id])
  subject         Subject        @relation(fields: [subjectId], references: [id])
  subjectId       String
  grades          Int[] // which grades (1st, 2nd, 12th, etc) this test is made for
  createdByUserId String
}

model TestQuestion {
  id                String               @id @default(cuid())
  test              Test                 @relation(fields: [testId], references: [id])
  testId            String
  type              Int
  // prisma doesn't yet support union types so we can't use something like `options (TextQuestion | RadioQuestion)[]`
  options           TestQuestionOption[]
  correctAnswerText String?
}

model TestQuestionOption {
  id             String        @id @default(cuid())
  content        String
  isCorrect      Boolean
  testQuestion   TestQuestion? @relation(fields: [testQuestionId], references: [id])
  testQuestionId String?
}

model TestResult {
  id              String   @id @default(cuid())
  test            Test     @relation(fields: [testId], references: [id])
  testId          String
  user            User?    @relation(fields: [userId], references: [id])
  score           Int
  scorePercentage Int
  userId          String?
  createdAt       DateTime @default(now())
}

model Subject {
  id    String @id @default(cuid())
  title String
  tests Test[]
}
